// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: engine.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MicroserviceController_Authenticate_FullMethodName   = "/engine.MicroserviceController/Authenticate"
	MicroserviceController_StartServer_FullMethodName    = "/engine.MicroserviceController/StartServer"
	MicroserviceController_StopServer_FullMethodName     = "/engine.MicroserviceController/StopServer"
	MicroserviceController_GetServerStats_FullMethodName = "/engine.MicroserviceController/GetServerStats"
)

// MicroserviceControllerClient is the client API for MicroserviceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceControllerClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	StartServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	StopServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	GetServerStats(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (MicroserviceController_GetServerStatsClient, error)
}

type microserviceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceControllerClient(cc grpc.ClientConnInterface) MicroserviceControllerClient {
	return &microserviceControllerClient{cc}
}

func (c *microserviceControllerClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, MicroserviceController_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceControllerClient) StartServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, MicroserviceController_StartServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceControllerClient) StopServer(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, MicroserviceController_StopServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceControllerClient) GetServerStats(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (MicroserviceController_GetServerStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MicroserviceController_ServiceDesc.Streams[0], MicroserviceController_GetServerStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &microserviceControllerGetServerStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MicroserviceController_GetServerStatsClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type microserviceControllerGetServerStatsClient struct {
	grpc.ClientStream
}

func (x *microserviceControllerGetServerStatsClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MicroserviceControllerServer is the server API for MicroserviceController service.
// All implementations must embed UnimplementedMicroserviceControllerServer
// for forward compatibility
type MicroserviceControllerServer interface {
	Authenticate(context.Context, *AuthRequest) (*AuthResponse, error)
	StartServer(context.Context, *ServerRequest) (*ServerResponse, error)
	StopServer(context.Context, *ServerRequest) (*ServerResponse, error)
	GetServerStats(*ServerRequest, MicroserviceController_GetServerStatsServer) error
	mustEmbedUnimplementedMicroserviceControllerServer()
}

// UnimplementedMicroserviceControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMicroserviceControllerServer struct {
}

func (UnimplementedMicroserviceControllerServer) Authenticate(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedMicroserviceControllerServer) StartServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedMicroserviceControllerServer) StopServer(context.Context, *ServerRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedMicroserviceControllerServer) GetServerStats(*ServerRequest, MicroserviceController_GetServerStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServerStats not implemented")
}
func (UnimplementedMicroserviceControllerServer) mustEmbedUnimplementedMicroserviceControllerServer() {
}

// UnsafeMicroserviceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceControllerServer will
// result in compilation errors.
type UnsafeMicroserviceControllerServer interface {
	mustEmbedUnimplementedMicroserviceControllerServer()
}

func RegisterMicroserviceControllerServer(s grpc.ServiceRegistrar, srv MicroserviceControllerServer) {
	s.RegisterService(&MicroserviceController_ServiceDesc, srv)
}

func _MicroserviceController_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceControllerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceController_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceControllerServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceController_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceControllerServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceController_StartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceControllerServer).StartServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceController_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceControllerServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroserviceController_StopServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceControllerServer).StopServer(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceController_GetServerStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroserviceControllerServer).GetServerStats(m, &microserviceControllerGetServerStatsServer{stream})
}

type MicroserviceController_GetServerStatsServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type microserviceControllerGetServerStatsServer struct {
	grpc.ServerStream
}

func (x *microserviceControllerGetServerStatsServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MicroserviceController_ServiceDesc is the grpc.ServiceDesc for MicroserviceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroserviceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.MicroserviceController",
	HandlerType: (*MicroserviceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _MicroserviceController_Authenticate_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _MicroserviceController_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _MicroserviceController_StopServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServerStats",
			Handler:       _MicroserviceController_GetServerStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "engine.proto",
}
